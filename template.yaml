AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Multi-Channel Chatbot Backend - ChatRouter Lambda

# グローバル設定
Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.11
    Environment:
      Variables:
        STAGE: !Ref Stage
        LOG_LEVEL: INFO

  # Parameters
Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment stage
  
  BedrockModelId:
    Type: String
    Default: anthropic.claude-3-haiku-20240307-v1:0
    Description: Bedrock model ID for AI responses
    
  SlackSigningSecret:
    Type: String
    Default: ""
    NoEcho: true
    Description: Slack signing secret for webhook validation
    
  LineChannelSecret:
    Type: String
    Default: ""
    NoEcho: true
    Description: LINE channel secret for webhook validation
    
  TeamsSecret:
    Type: String
    Default: ""
    NoEcho: true
    Description: Teams webhook secret
    
  CustomUISecret:
    Type: String
    Default: ""
    NoEcho: true
    Description: Custom UI webhook secret
    
  GithubAppKey:
    Type: String
    Default: ""
    NoEcho: true
    Description: GitHub App private key

# リソース定義
Resources:
  # API Gateway (HTTP API)
  ChatbotApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Stage
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        MaxAge: 300

  # ChatRouter Lambda Function
  ChatRouterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/chat-router/
      Handler: lambda_function.lambda_handler
      Description: ChatRouter Lambda - handles webhook processing and chat routing
      Environment:
        Variables:
          BEDROCK_MODEL_ID: !Ref BedrockModelId
          CHAT_HISTORY_TABLE: !Ref ChatHistoryTable
          CHAT_ASSETS_BUCKET: !Ref ChatAssetsBucket
          KNOWLEDGE_TABLE_NAME: !Ref KnowledgeVectorTable
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
          LINE_CHANNEL_SECRET: !Ref LineChannelSecret
          TEAMS_SECRET: !Ref TeamsSecret
          CUSTOM_UI_SECRET: !Ref CustomUISecret
          GITHUB_APP_KEY: !Ref GithubAppKey
          COMMAND_LANG_MAP: '{"ask":["ask","質問"],"investigate":["investigate","調査"],"clear":["clear","クリア"],"help":["help","ヘルプ"]}'
          TTL_SECONDS: '86400'
      Events:
        # Webhook endpoints
        SlackWebhook:
          Type: HttpApi
          Properties:
            ApiId: !Ref ChatbotApi
            Method: POST
            Path: /webhook/slack
        LineWebhook:
          Type: HttpApi
          Properties:
            ApiId: !Ref ChatbotApi
            Method: POST
            Path: /webhook/line
        TeamsWebhook:
          Type: HttpApi
          Properties:
            ApiId: !Ref ChatbotApi
            Method: POST
            Path: /webhook/teams
        CustomWebhook:
          Type: HttpApi
          Properties:
            ApiId: !Ref ChatbotApi
            Method: POST
            Path: /webhook/custom
        # Test endpoints
        HealthCheck:
          Type: HttpApi
          Properties:
            ApiId: !Ref ChatbotApi
            Method: GET
            Path: /health
        TestEndpoint:
          Type: HttpApi
          Properties:
            ApiId: !Ref ChatbotApi
            Method: ANY
            Path: /test
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatHistoryTable
        - DynamoDBCrudPolicy:
            TableName: !Ref KnowledgeVectorTable
        - S3CrudPolicy:
            BucketName: !Ref ChatAssetsBucket
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
              Resource: !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default'
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:chatbot/*'

  # DynamoDB Tables
  ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Stage}-ChatHistory'
      BillingMode: ON_DEMAND
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: N
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: Chatbot
        - Key: Stage
          Value: !Ref Stage

  KnowledgeVectorTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Stage}-chatbot-knowledge-vector'
      BillingMode: ON_DEMAND
      AttributeDefinitions:
        - AttributeName: vector_id
          AttributeType: S
      KeySchema:
        - AttributeName: vector_id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: Chatbot
        - Key: Stage
          Value: !Ref Stage

  # S3 Bucket for chat assets
  ChatAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Stage}-chat-assets'
      LifecycleConfiguration:
        Rules:
          - Id: ExpireAfter1Day
            Status: Enabled
            ExpirationInDays: 1
            Prefix: slack/
          - Id: ExpireAfter1DayTeams
            Status: Enabled
            ExpirationInDays: 1
            Prefix: teams/
          - Id: ExpireAfter1DayLine
            Status: Enabled
            ExpirationInDays: 1
            Prefix: line/
          - Id: ExpireAfter1DayCustom
            Status: Enabled
            ExpirationInDays: 1
            Prefix: custom/
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Project
          Value: Chatbot
        - Key: Stage
          Value: !Ref Stage

# EventBridge Custom Bus (for async processing)
  ChatbotEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub '${Stage}-chatbot-events'
      Tags:
        - Key: Project
          Value: Chatbot
        - Key: Stage
          Value: !Ref Stage

# アウトプット
Outputs:
  ChatbotApiUrl:
    Description: "Chatbot API Gateway URL"
    Value: !Sub "https://${ChatbotApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
    Export:
      Name: !Sub "${AWS::StackName}-api-url"

  ChatRouterFunctionArn:
    Description: "ChatRouter Lambda Function ARN"
    Value: !GetAtt ChatRouterFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-chat-router-arn"

  ChatHistoryTableName:
    Description: "Chat History DynamoDB Table Name"
    Value: !Ref ChatHistoryTable
    Export:
      Name: !Sub "${AWS::StackName}-chat-history-table"

  ChatAssetsBucketName:
    Description: "Chat Assets S3 Bucket Name"
    Value: !Ref ChatAssetsBucket
    Export:
      Name: !Sub "${AWS::StackName}-chat-assets-bucket"

  KnowledgeVectorTableName:
    Description: "Knowledge Vector DynamoDB Table Name"
    Value: !Ref KnowledgeVectorTable
    Export:
      Name: !Sub "${AWS::StackName}-knowledge-table"

  EventBusName:
    Description: "EventBridge Custom Bus Name"
    Value: !Ref ChatbotEventBus
    Export:
      Name: !Sub "${AWS::StackName}-event-bus"